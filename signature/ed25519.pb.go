// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ed25519.proto

package signature

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ED25519PubKey struct {
	PK []byte `protobuf:"bytes,1,opt,name=PK,proto3" json:"PK,omitempty"`
}

func (m *ED25519PubKey) Reset()      { *m = ED25519PubKey{} }
func (*ED25519PubKey) ProtoMessage() {}
func (*ED25519PubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed25519_8c11d4c646ece0a0, []int{0}
}
func (m *ED25519PubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ED25519PubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ED25519PubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ED25519PubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ED25519PubKey.Merge(dst, src)
}
func (m *ED25519PubKey) XXX_Size() int {
	return m.Size()
}
func (m *ED25519PubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ED25519PubKey.DiscardUnknown(m)
}

var xxx_messageInfo_ED25519PubKey proto.InternalMessageInfo

func (m *ED25519PubKey) GetPK() []byte {
	if m != nil {
		return m.PK
	}
	return nil
}

type ED25519PrivKey struct {
	SK []byte `protobuf:"bytes,1,opt,name=SK,proto3" json:"SK,omitempty"`
}

func (m *ED25519PrivKey) Reset()      { *m = ED25519PrivKey{} }
func (*ED25519PrivKey) ProtoMessage() {}
func (*ED25519PrivKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed25519_8c11d4c646ece0a0, []int{1}
}
func (m *ED25519PrivKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ED25519PrivKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ED25519PrivKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ED25519PrivKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ED25519PrivKey.Merge(dst, src)
}
func (m *ED25519PrivKey) XXX_Size() int {
	return m.Size()
}
func (m *ED25519PrivKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ED25519PrivKey.DiscardUnknown(m)
}

var xxx_messageInfo_ED25519PrivKey proto.InternalMessageInfo

func (m *ED25519PrivKey) GetSK() []byte {
	if m != nil {
		return m.SK
	}
	return nil
}

func init() {
	proto.RegisterType((*ED25519PubKey)(nil), "signature.ED25519PubKey")
	proto.RegisterType((*ED25519PrivKey)(nil), "signature.ED25519PrivKey")
}
func (this *ED25519PubKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ED25519PubKey)
	if !ok {
		that2, ok := that.(ED25519PubKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PK, that1.PK) {
		return false
	}
	return true
}
func (this *ED25519PrivKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ED25519PrivKey)
	if !ok {
		that2, ok := that.(ED25519PrivKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SK, that1.SK) {
		return false
	}
	return true
}
func (this *ED25519PubKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&signature.ED25519PubKey{")
	s = append(s, "PK: "+fmt.Sprintf("%#v", this.PK)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ED25519PrivKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&signature.ED25519PrivKey{")
	s = append(s, "SK: "+fmt.Sprintf("%#v", this.SK)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEd25519(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ED25519PubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ED25519PubKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PK) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEd25519(dAtA, i, uint64(len(m.PK)))
		i += copy(dAtA[i:], m.PK)
	}
	return i, nil
}

func (m *ED25519PrivKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ED25519PrivKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SK) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEd25519(dAtA, i, uint64(len(m.SK)))
		i += copy(dAtA[i:], m.SK)
	}
	return i, nil
}

func encodeVarintEd25519(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ED25519PubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PK)
	if l > 0 {
		n += 1 + l + sovEd25519(uint64(l))
	}
	return n
}

func (m *ED25519PrivKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SK)
	if l > 0 {
		n += 1 + l + sovEd25519(uint64(l))
	}
	return n
}

func sovEd25519(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEd25519(x uint64) (n int) {
	return sovEd25519(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ED25519PubKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ED25519PubKey{`,
		`PK:` + fmt.Sprintf("%v", this.PK) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ED25519PrivKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ED25519PrivKey{`,
		`SK:` + fmt.Sprintf("%v", this.SK) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEd25519(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ED25519PubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEd25519
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ED25519PubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ED25519PubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEd25519
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEd25519
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PK = append(m.PK[:0], dAtA[iNdEx:postIndex]...)
			if m.PK == nil {
				m.PK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEd25519(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEd25519
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ED25519PrivKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEd25519
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ED25519PrivKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ED25519PrivKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SK", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEd25519
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEd25519
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SK = append(m.SK[:0], dAtA[iNdEx:postIndex]...)
			if m.SK == nil {
				m.SK = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEd25519(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEd25519
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEd25519(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEd25519
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEd25519
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEd25519
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEd25519
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEd25519
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEd25519(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEd25519 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEd25519   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ed25519.proto", fileDescriptor_ed25519_8c11d4c646ece0a0) }

var fileDescriptor_ed25519_8c11d4c646ece0a0 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4d, 0x31, 0x32,
	0x35, 0x35, 0xb4, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2c, 0xce, 0x4c, 0xcf, 0x4b,
	0x2c, 0x29, 0x2d, 0x4a, 0x95, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf,
	0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0xab, 0x48, 0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30,
	0x0b, 0xa2, 0x53, 0x49, 0x9e, 0x8b, 0xd7, 0xd5, 0x05, 0x6c, 0x54, 0x40, 0x69, 0x92, 0x77, 0x6a,
	0xa5, 0x10, 0x1f, 0x17, 0x53, 0x80, 0xb7, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x53, 0x80,
	0xb7, 0x92, 0x02, 0x17, 0x1f, 0x4c, 0x41, 0x51, 0x66, 0x19, 0x54, 0x45, 0x30, 0x5c, 0x45, 0xb0,
	0xb7, 0x93, 0xc9, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd8,
	0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63,
	0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96,
	0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x24, 0x36, 0xb0, 0xfd, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x1a, 0x9c, 0xe2, 0xca, 0x00, 0x00, 0x00,
}
