// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: p256r1.proto

package signature

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type P256R1PubKey struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *P256R1PubKey) Reset()      { *m = P256R1PubKey{} }
func (*P256R1PubKey) ProtoMessage() {}
func (*P256R1PubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_p256r1_9578a8c03fb0c2a8, []int{0}
}
func (m *P256R1PubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *P256R1PubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_P256R1PubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *P256R1PubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P256R1PubKey.Merge(dst, src)
}
func (m *P256R1PubKey) XXX_Size() int {
	return m.Size()
}
func (m *P256R1PubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_P256R1PubKey.DiscardUnknown(m)
}

var xxx_messageInfo_P256R1PubKey proto.InternalMessageInfo

func (m *P256R1PubKey) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *P256R1PubKey) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

type P256R1PrivKey struct {
	D []byte `protobuf:"bytes,1,opt,name=D,proto3" json:"D,omitempty"`
}

func (m *P256R1PrivKey) Reset()      { *m = P256R1PrivKey{} }
func (*P256R1PrivKey) ProtoMessage() {}
func (*P256R1PrivKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_p256r1_9578a8c03fb0c2a8, []int{1}
}
func (m *P256R1PrivKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *P256R1PrivKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_P256R1PrivKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *P256R1PrivKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P256R1PrivKey.Merge(dst, src)
}
func (m *P256R1PrivKey) XXX_Size() int {
	return m.Size()
}
func (m *P256R1PrivKey) XXX_DiscardUnknown() {
	xxx_messageInfo_P256R1PrivKey.DiscardUnknown(m)
}

var xxx_messageInfo_P256R1PrivKey proto.InternalMessageInfo

func (m *P256R1PrivKey) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func init() {
	proto.RegisterType((*P256R1PubKey)(nil), "signature.P256R1PubKey")
	proto.RegisterType((*P256R1PrivKey)(nil), "signature.P256R1PrivKey")
}
func (this *P256R1PubKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*P256R1PubKey)
	if !ok {
		that2, ok := that.(P256R1PubKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.X, that1.X) {
		return false
	}
	if !bytes.Equal(this.Y, that1.Y) {
		return false
	}
	return true
}
func (this *P256R1PrivKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*P256R1PrivKey)
	if !ok {
		that2, ok := that.(P256R1PrivKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.D, that1.D) {
		return false
	}
	return true
}
func (this *P256R1PubKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&signature.P256R1PubKey{")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *P256R1PrivKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&signature.P256R1PrivKey{")
	s = append(s, "D: "+fmt.Sprintf("%#v", this.D)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringP256R1(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *P256R1PubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P256R1PubKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.X) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintP256R1(dAtA, i, uint64(len(m.X)))
		i += copy(dAtA[i:], m.X)
	}
	if len(m.Y) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintP256R1(dAtA, i, uint64(len(m.Y)))
		i += copy(dAtA[i:], m.Y)
	}
	return i, nil
}

func (m *P256R1PrivKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P256R1PrivKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.D) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintP256R1(dAtA, i, uint64(len(m.D)))
		i += copy(dAtA[i:], m.D)
	}
	return i, nil
}

func encodeVarintP256R1(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *P256R1PubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.X)
	if l > 0 {
		n += 1 + l + sovP256R1(uint64(l))
	}
	l = len(m.Y)
	if l > 0 {
		n += 1 + l + sovP256R1(uint64(l))
	}
	return n
}

func (m *P256R1PrivKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovP256R1(uint64(l))
	}
	return n
}

func sovP256R1(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozP256R1(x uint64) (n int) {
	return sovP256R1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *P256R1PubKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&P256R1PubKey{`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`}`,
	}, "")
	return s
}
func (this *P256R1PrivKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&P256R1PrivKey{`,
		`D:` + fmt.Sprintf("%v", this.D) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringP256R1(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *P256R1PubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP256R1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: P256R1PubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: P256R1PubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP256R1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP256R1
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.X = append(m.X[:0], dAtA[iNdEx:postIndex]...)
			if m.X == nil {
				m.X = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP256R1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP256R1
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y = append(m.Y[:0], dAtA[iNdEx:postIndex]...)
			if m.Y == nil {
				m.Y = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP256R1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP256R1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *P256R1PrivKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP256R1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: P256R1PrivKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: P256R1PrivKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP256R1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP256R1
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = append(m.D[:0], dAtA[iNdEx:postIndex]...)
			if m.D == nil {
				m.D = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP256R1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP256R1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipP256R1(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowP256R1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP256R1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP256R1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthP256R1
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowP256R1
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipP256R1(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthP256R1 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowP256R1   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("p256r1.proto", fileDescriptor_p256r1_9578a8c03fb0c2a8) }

var fileDescriptor_p256r1_9578a8c03fb0c2a8 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x30, 0x32, 0x35,
	0x2b, 0x32, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2c, 0xce, 0x4c, 0xcf, 0x4b, 0x2c,
	0x29, 0x2d, 0x4a, 0x95, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5,
	0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0xab, 0x48, 0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30, 0x0b,
	0xa2, 0x53, 0x49, 0x8b, 0x8b, 0x27, 0xc0, 0xc8, 0xd4, 0x2c, 0xc8, 0x30, 0xa0, 0x34, 0xc9, 0x3b,
	0xb5, 0x52, 0x88, 0x87, 0x8b, 0x31, 0x42, 0x82, 0x51, 0x81, 0x51, 0x83, 0x27, 0x88, 0x31, 0x02,
	0xc4, 0x8b, 0x94, 0x60, 0x82, 0xf0, 0x22, 0x95, 0x64, 0xb9, 0x78, 0xa1, 0x6a, 0x8b, 0x32, 0xcb,
	0xa0, 0x8a, 0x5d, 0x60, 0x8a, 0x5d, 0x9c, 0x4c, 0x2e, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e,
	0xe1, 0xc3, 0x43, 0x39, 0xc6, 0x86, 0x47, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24,
	0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x78,
	0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x24,
	0xb1, 0x81, 0xdd, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xb8, 0x22, 0x3e, 0xd1, 0x00,
	0x00, 0x00,
}
